# N = 19186915407899080724333459454250331288355954712208362624358684331431413983620527326089544563773366141748754882247631413719149908284642582151761277957403306

# p= int(127825760751467209855698084249488992385642378557653078937712414668655965746959)
# q= int(53361880553516343722166022813641364391693995142665371691214161281067066047325)
N = 19186915407899080724333459454250331288355954712208362624358684331431413983620527326089544563773366141748754882247631413719149908284642582151761277957403306

# p = int(127825760751467209855698084249488992385642378557653078937712414668655965746959)
# q = int(53361880553516343722166022813641364391693995142665371691214161281067066047325)
p = int(9593457703949540362166729727125165644177977356104181312179342165715706991810263663044772281886683070874377441123815706859574954142321291075880638978701653
)
q = int(2)

print(len(str(N)))
print(len(str(p)),len(str(q)))
if N == (p) * (q):
    print('YES')







# ┌──(kali㉿kali)-[~/picoctf/EVEN_RSA_CAN_BE_BROKEN???]
# └─$ nc verbal-sleep.picoctf.net 53550
N: 19186915407899080724333459454250331288355954712208362624358684331431413983620527326089544563773366141748754882247631413719149908284642582151761277957403306
e: 65537
cyphertext: 4138209534904582223856579506475396456531516138713670522838264464527025105285314871079167161474692591525643968711083484906916782244385859279241498801347201
    
# N = 19186915407899080724333459454250331288355954712208362624358684331431413983620527326089544563773366141748754882247631413719149908284642582151761277957403306
# a = 134794 409357 520521 184931 464854 104124 848231 979822 279185 880410 735715 105554 020675
# b = 

# n = a² + b²
# a = 127825 760751 467209 855698 084249 488992 385642 378557 653078 937712 414668 655965 746959 （78桁）
# b = 53361 880553 516343 722166 022813 641364 391693 995142 665371 691214 161281 067066 047325 (77桁)

# ================================================================================================


                                                                                                                                                                                                                                            
# ┌──(kali㉿kali)-[~/picoctf/EVEN_RSA_CAN_BE_BROKEN???]
# └─$ cat encrypt.py 
from sys import exit
from Crypto.Util.number import bytes_to_long, inverse
from setup import get_primes

e = 65537

def gen_key(k):
    """
    Generates RSA key with k bits
    """
    p,q = get_primes(k//2)
    N = p*q
    d = inverse(e, (p-1)*(q-1))

    return ((N,e), d)

def encrypt(pubkey, m):
    N,e = pubkey
    return pow(bytes_to_long(m.encode('utf-8')), e, N)

def main(flag):
    pubkey, _privkey = gen_key(1024)
    encrypted = encrypt(pubkey, flag) 
    return (pubkey[0], encrypted)

if __name__ == "__main__":
    flag = open('flag.txt', 'r').read()
    flag = flag.strip()
    N, cypher  = main(flag)
    print("N:", N)
    print("e:", e)
    print("cyphertext:", cypher)
    exit()

            
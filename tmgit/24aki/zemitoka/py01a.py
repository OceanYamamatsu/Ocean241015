import math

# 与えられた値
N = 19186915407899080724333459454250331288355954712208362624358684331431413983620527326089544563773366141748754882247631413719149908284642582151761277957403306

p = int(127825760751467209855698084249488992385642378557653078937712414668655965746959)
q = int(53361880553516343722166022813641364391693995142665371691214161281067066047325)
N=p*p+q*q
# オイラー関数 φ(N) を計算
phi = (p - 1) * (q - 1)

# 公開鍵 e を設定（通常 65537 が多い）
e = 65537

# e と φ(N) が互いに素か確認
print("gcd(e, φ(N)) =", math.gcd(e, phi))

# 秘密鍵 d を計算（modular inverse）
d = pow(e, -1, phi)
print("秘密鍵 d =", d)

# テストとして平文を数値で定義
M = 12345678901234567890

# 暗号化: C = M^e mod N
C = pow(M, e, N)

# 復号化: M2 = C^d mod N
M2 = pow(C, d, N)

print("暗号文 C =", C)
print("復号結果 M2 =", M2)
print("復号は正しいか？", M == M2)

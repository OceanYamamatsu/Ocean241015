cd ps,t=map(int,input().split())
ans=0
for a in range(s+1):
    for b in range(s+1):
        for c in range(s+1):
            if a+b+c <= s and a*b*c <= t:
                ans+=1
print(ans)
"""""""
a=0
b=0
c=0
d=0
e=0
u=0
l0=[]
l1=[]
p1=[]
p2=[]
p3=[]
p4=[]
p5=[]
p6=[]
p7=[]
p8=[]
pa=[p1,p2,p3,p4,p5,p6,p7,p8]



#----------------------------------------------------------------------------------

import math


a,b= list(map(int,input().split()))

a0=[a-u for u in range(a)]
print(a0)
a1=math.prod(a0)
print(a1)



b0=[b-u for u in range(b)]
b1=math.prod(b0)


if len(a1) == 0:
    if len(a1) == 1:
        c=a0//3
    else:
        d=2
else:
    c=1

if math.prod(b1) == 0:8
    if len(b1)==1:
        d=b0//3
    else:
        d=2
else:
    d=1
ans=c+d
print(ans)
"""""""
#/////////////////////////////////////////////////////////

a=1
b=1
c=0
l0=[]
l1=[]
l2=[]
l0 = list(map(int,input().split()))
for u in l0[0:3]:
    l1.append(u)
for u in l0[3:6]:
    l2.append(u)

for u in l1:
    a*=u
for u in l2:
    b*=u

c=(a-b)%998244353
print(c)


#//////////////////////////////////////////////////





l0=[]
l1=[]
p8=[]
a=0
for u in range(int(input())):
    l0.append(input())
    if u not in l1:
        l1.append(u)

c=1
#for u in l0:
#    if u not in l1:
#        l1.append(u)

for u in l0:
    if u in l1:
        z=l1.count(u)-1
        if z != 0:
            p8.append(u+"(" +str(z) + ")")
            l1.append(u)
        else:
            p8.append(u)
            l1.append(u)
    else:
        p8.append(u)

for u in p8:
    print(u)




#///////////////////////////////////////////////////////////////




a,b = input().split()

a1 = 0
b1 = 0
if a == "A":
    a1 = 0
elif a == "B":
    a1 = 3
elif a == "C":
    a1 = 4
elif a == "D":
    a1 = 8
elif a == "E":
    a1 = 9
elif a == "F":
    a1 = 14
elif a == "G":
    a1 = 23

if b == "A":
    b1 = 0
elif b == "B":
    b1 = 3
elif b == "C":
    b1 = 4
elif b == "D":
    b1 = 8
elif b == "E":
    b1 = 9
elif b == "F":
    b1 = 14
elif b == "G":
    b1 = 23

print(abs(b1-a1))
print(a1-b1)


#////////////////////////////////////////////////////////////////////////////////////



A = []

q = int(input())

for u in range(q):
    qw = input().split()
    qwtype = int(qw[0])

    if qwtype == 1:
        x = int(qw[1])
        A.append(x)
    
    elif qwtype == 2:
        k = int(qw[1])
        print(A[-k])


#/////////////////////////////////////////////////////


syo = 998244353

def main():
    N = int(input())
    ans = 0
    base = 1
    for digit_count in range(1, len(str(N)) + 1):
        if base * 10 <= N:
            ans += base * 9 * digit_count
            ans %= syo
            base *= 10
        else:
            ans += (N - base + 1) * digit_count
            ans %= syo
            break
    print(ans)

if __name__ == "__main__":
    main()

#/////////////////////////////////////////////

syo = 998244353
ans = 0
deka = 1

n = int(input())
for u in range(1, len(str(n)) + 1):
    if deka * 10 <= n:
        ans += deka * 9 * u
        ans %= syo
        deka *= 10
    else:
        ans += (n - deka + 1) * u
        ans %= syo
        break
print(ans)

if __name__ == "__main__":
    main()


#zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz


syo = 998244353
ans = 0
deka = 1

n = int(input())
for u in range(1, len(str(n)) + 1):
    if deka * 10 <= n:
        ans += deka * 9 * u
        ans %= syo
        deka *= 10
    else:
        ans += (n - deka + 1) * u
        ans %= syo
        break
print(ans)

if __name__ == "__main__":
    main()




MOD = 998244353

def main():
    N = int(input())
    ans = 0
    base = 1
    for digit_count in range(1, len(str(N)) + 1):
        if base * 10 <= N:
            ans += base * 9 * digit_count
            ans %= MOD
            base *= 10
        else:
            ans += (N - base + 1) * digit_count
            ans %= MOD
            break
    print(ans)

if __name__ == "__main__":
    main()



#sssssssssssssssssssssssssssssssssssssssssssssssss


import itertools

def can_rearrange_strings(strings):
    # 文字列の長さ
    M = len(strings[0])
    # 文字列の数
    N = len(strings)
    
    # 文字列のすべての組み合わせを生成
    for permutation in itertools.permutations(strings):
        # 条件を満たすかどうかを判定
        for i in range(N - 1):
            diff_count = sum(1 for j in range(M) if permutation[i][j] != permutation[i + 1][j])
            if diff_count != 1:
                break
        else:
            # 条件を満たす並び替えが見つかった場合
            return True
    
    # 条件を満たす並び替えが見つからなかった場合
    return False

# テストケース
strings = ["abc", "def", "ghi"]
print(can_rearrange_strings(strings))  # 出力: True

#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BombController : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    void OnTriggerEnter(Collider c)
    {
        c.gameObject.GetComponent<Rigidbody>().AddForce(Vector3.up * 100, ForceMode.Impulse);
    }

}


#ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


def combination2():
    a,b=map(int,input().split())
    if a > b:
        lc1=[a-u for u in range(b)]
        lc2=[u+1 for u in range(b)]
        y=1
        z=1
        x=0
        for u in lc1:
            y*=u
        for u in lc2:
            z*=u
        if 0==y%z:
            ans=y//z
            #return True
        else:
            ans=y/z
            ans='No'
    else:
        ans='No1'
        #return False
    print(ans)

combination2()

#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


def ctz():
    n = int(input())
    if  n== 0:
        print(0)
    else:
        count = 0
        while n % 2 == 0:
            n /= 2
            count += 1
        print(count)

ctz()


#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


b=0
c=0

n=int(input())
a=list(map(int,input().split()))
ct=0
for u in range(n-1):
    b,c=(int(u) for u in input().split())
    if a[ct] > b:
        z=a[ct]//b
        a[ct]=a[ct]-(b*z)
        a[ct+1]=a[ct+1]+(c*z)
        ct+=1

print(a[-1])




#kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk



b=0
c=0

n=int(input())
a=list(map(int,input().split()))
ct=0
for u in range(n-1):
    b,c=(int(u) for u in input().split())
    if a[ct] > b:
        z=a[ct]//b
        a[ct]=a[ct]-(b*z)
        a[ct+1]=a[ct+1]+(c*z)
        ct+=1

print(a[-1])


def count_distinct_integers(a):
    # ハッシュマップを初期化
    integer_count = {}
    
    # 正整数列を走査し、整数の出現回数をカウント
    for num in a:
        if num in integer_count:
            integer_count[num] += 1
        else:
            integer_count[num] = 1
    
    # ハッシュマップのキーの数が異なる整数の数になる
    distinct_count = len(integer_count)
    return distinct_count

# テスト用の正整数列
a = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]
# 正整数列に現れる異なる整数の数をカウント
result = count_distinct_integers(a)
print("正整数列に現れる異なる整数の数:", result)




dc = {}
z=list(map(int,input().split()))
a=list(map(int,input().split()))
print(a)
print(z)
for num in a:
    if num in dc:
        dc[num] += 1
    else:
        dc[num] = 1
print(dc)
ans = len(dc)
print(ans)



print(int("".join(map(str,[1 for u in range(int(input()))])))%998244353)







s=input()
t=input()
ans='Yes'
c=0
if t<=s:
    for u in t:
        for z in s:
            if z == s:
                c=1
            else:
                if c==1:
                    break
        if c==1:
            ans='No'
            break
else:
    ans='No'
print(ans)

print(s)
print(t)



s=int(input())
b=input()
al=[]
c=0
for u in b:
    if u!= '"':
        if u== ",":
            if c%2 == 0:
                al.append('.')
            else:
                al.append(u)
        else:
            al.append(u)
    else:
        al.append(u)
        c+=1


print(''.join(al))







k=int(input())
a,b=list(map(str,input().split()))
aa=0
bb=0
c=len(a)-1
for u in a:
    aa+=(k**c)*int(u)
    c-=1
c=len(b)-1
for u in b:
    bb+=(k**c)*int(u)
    c-=1
print(aa*bb)



def is_subsequence(s, t):
    # sの文字列インデックス
    i = 0
    # tの文字列インデックス
    j = 0

    # sとtの文字列を比較
    while i < len(s) and j < len(t):
        # 文字が一致した場合、次の文字を比較するためにiとjをインクリメント
        if s[i] == t[j]:
            i += 1
        j += 1

    # sのすべての文字が見つかった場合、tはsの部分文字列
    return i == len(s)

# テスト用の例
S = input().strip()
T = input().strip()
if is_subsequence(T, S):
    print("Yes")
else:
    print("No")






i=0
j=0

s = input()
t = input()
c=0
if len(t) <= len(s):
    for u in s:
        if u == t[0]:
            c+=1
        else:
            if c!=0:
                c=0
if c == len(t)-1:
    print('Yes')
else:
    print('No')



    if c == len(t):
    print('Yes')
else:
    print('No')

print(len(t))
print(c)







s = input()
t = input()
c=0
if len(t) <= len(s):
    for u in range(len(s)-len(t)):
        if s[c:c+len(t)] ==t:
            print("Yes")
            break
        else:
            c+=1
    else:
        print('No')
            


#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
sql

#insert into users (uid, name) values (22211379,'yamamatsu');
select * from users;

#aaaaaaaaaaa

insert into users (uid, name) values (22211379,'yamamatsu');
update users set name='Yamamatsu'where uid=22211379;
select * from users;


#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

s = input()
t = input()
c=0
if len(t) <= len(s):
    for u in range(len(s)-len(t)+1):
        if s[c:c+len(t)] ==t:
            print("Yes")
            break
        else:
            c+=1
    else:
        print('No')
else:
    print('No')


#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa



b=[]
z=0
x=0
a =int(input())
for u in range(a):
    #z,x=
    b.append(list(map(int,input().split())))
print(b)


#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa



a=int(input())
#lt=[]
for x in range(a):
    if a >= x:
        for y in range(a):
            if a >= x+y:
                for z in range(a):
                    if a >= x+y+z:
                        print(x,y,z)
                    #lt.append([x,y,z])
                    #print(x,y,z)
        #else:
            #print(x,y,z)
    #else:
        #print(x,y,z)
#print(lt)




#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


a=int(input())
lt=[]
for x in range(a+1):
    for y in range(a+1):
        for z in range(a+1):
            lt.append([x,y,z])
for u in lt:
    if sum(u) <= a:
            print(u[0],u[1],u[2])

####################################################################


x,k=list(map(int,(input().split())))
de={}
de2={}
lt=[]
ct=0
for u in range(x):
    z=sum(list(map(int,(input().split()))))
    lt.append(z)
    #de=[u+1,z]
    de[u]=z
    #print(de.keys())


de2=sorted(de.items(),key=lambda x:x[1])

#de2=sorted(de.items())
print(de)
print(de2)




#print(lt)

#(u+"(" +str(z) + ")")








#################################################################################



import math
#import numpy

b=[]
z=0
x=0
a =int(input())
for u in range(a):
    #z,x=
    b.append(list(map(int,input().split())))
print(b)

zz=0
cc=-100
c=[]
for u in range(a-1):
    z=((b[u][0]-b[u+1][0])**2) + ((b[u][1]-b[u+1][1])**2)
    #c.append(  z  )
    zz=math.sqrt(z)
    c.append(zz)
    if cc <= zz :
        cc=zz
#print(z)
print(cc)
print(math.sqrt(z))
print(c)







###########################################################################






import math
#import numpy

b=[]
a =int(input())
for u in range(a):
    b.append(list(map(int,input().split())))
q=0
lt=[]
for u in range(a):
    for n in range(a):
        q=((b[u][0]-b[n][0])**2) + ((b[u][1]-b[n][1])**2)
        lt.append(math.sqrt(q))
print(max(lt))





#########################################################################




lt=[]
n,k=list(map(int,input().split()))
for q in range(n):
    lt.append(sum(list(map(int,input().split()))))
lt2=lt[:]
lt2.sort()
border=(lt2[-k]-300)
for i in lt:
    if border <= i:
        print('yes')
    else:
        print('No')





###########################################################################



n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))

s2=[]
ct=0
for i in s:
    s2.append(ct+i)
    ct+=i
print(s2)

for i in s2:
    j=t[0]
    if i <= j:
        ans.append(j):
    else:
        ans.append(i):




##############################################


n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))

s2=[]
ct=0
for i in s:
    s2.append(ct+i)
    ct+=i
ct=0
for i in s2:
    j=t[ct]
    if i <= j:
        print(i)
    else:
        print(j)
    ct+=1

print(s)
print(s2)


######################################"########################################"



n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))

s2=[]
ct=0
zs=0
#一時
for i in s:

    zs+=i
    zt=t[ct]
    if zt <= zs:
        print(zt)
        zs=zt
    else:
        print(zs)
    ct+=1






######################################"########################################"



n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))

s2=[]
ct=1
zs=0
#一時
if s[0]<=t[0]:
    s2=s[0]
else:
    s2=t[0]
print(s2)
#1回目
for i in range(n-1):
    zs=s[ct]
    zt=t[ct]
    if zt <= zs:
        print(zt)
        s2=zt+zs
    else:
        print(zs)
        s2+=zs
    ct+=1



#4 1 5
#3 10 100
#3
#7
#8






############################################################################

n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))

s2=[]
zs=0
#一時
s2=t[0]
print(s2,'一回目')
s2+=s[0]
#1回目
for i in range(n-1):
    zs=s[i+1]
    zt=t[i+1]
    print(s2,'s2',zt,'zt')
    print(zs,'zs')
    if zt <= s2:
        print(zt,'T')
        s2=zt+zs
    else:
        print(s2,'S')
        s2+=zs



#4 1 5
#3 10 100
#3
#7
#8







n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))

ss=[]
s2=[]
zs=0
#一時

s2=t[0]
#print(s2)
ss.append(s2)
s2+=s[0]
#1回目
for i in range(n-1):
    zs=s[i+1]
    zt=t[i+1]

    if zt <= s2:
        #print(zt)
        ss.append(zt)
        s2*=0
        s2+=zt
        s2+=zs
    else:
        #print(s2)
        ss.append(s2)
        s2+=zs
print(s)
print(t)
print(ss)
#s[-1]がs[0]に渡すのが早い可能性？
ss[0]=s2
s3=0
for i in range(n):
    zs=ss[i]
    zt=t[i]
    cts=s[i]

    if zt <= zs:
        print(zt)
        s3*=0
        s3+=zt
        s3+=cts
    else:
        print(s3)
        s3+=cts



#4 1 5
#3 10 100
#3
#7
#8











n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))


lts=[]

tem*0
lts.append(t[0])
#=[]
#zs=0
#一時

#s2=t[0]
#print(s2)
#ss.append(s2)
#s2+=s[0]
#1回目
for i in range(n-1):
    zs=s[i+1]
    zt=t[i+1]

    if zt <= s2:
        #print(zt)
        ss.append(zt)
        s2*=0
        s2+=zt
        s2+=zs
    else:
        #print(s2)
        ss.append(s2)
        s2+=zs
print(s)
print(t)
print(ss)
#s[-1]がs[0]に渡すのが早い可能性？
ss[0]=s2
s3=0
for i in range(n):
    zs=ss[i]
    zt=t[i]
    cts=s[i]

    if zt <= zs:
        print(zt)
        s3*=0
        s3+=zt
        s3+=cts
    else:
        print(s3)
        s3+=cts



#4 1 5
#3 10 100
#3
#7
#8






8
84 87 78 16 94 36 87 93
50 22 63 28 91 60 64 27






n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))



#=[]
#zs=0
#一時

#s2=t[0]
#print(s2)
#ss.append(s2)
#s2+=s[0]
#1回目
lts=[]
eye=0
eye+=t[0]
lts.append(t[0])

eye=0
for i in range(n-1):
    tms=s[i+1]
    tmt=t[i+1]
    if tmt <= s2:
        #print(zt)
        lts.append(tmt)
        s2*=0
        s2+=zt
        s2+=zs
    else:
        #print(s2)
        ss.append(s2)
        s2+=zs
print(s)
print(t)
print(ss)
#s[-1]がs[0]に渡すのが早い可能性？
ss[0]=s2
s3=0
for i in range(n):
    zs=ss[i]
    zt=t[i]
    cts=s[i]

    if zt <= zs:
        print(zt)
        s3*=0
        s3+=zt
        s3+=cts
    else:
        print(s3)
        s3+=cts

#########################################################################################################################################################






n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))



#=[]
#zs=0
#一時

#s2=t[0]
#print(s2)
#ss.append(s2)
#s2+=s[0]
#1回目
lts=[]
eye=0
eye+=t[0]
lts.append(t[0])
eye+=s[0]

for i in range(n-1):
    tms=s[i+1]
    tmt=t[i+1]
    if tmt <= eye:
        #print(zt)
        lts.append(tmt)
        eye*=0
        eye+=tmt
    else:
        #print(s2)
        lts.append(eye)
    eye+=tms
print(s)
print(t)
print(lts)
print('lts[-1]',eye)
print(lts[0])
#s[-1]がs[0]に渡すのが早い可能性？
#ダイヤを渡し終わってると考えｔはなし
for i in range(n):
    #print('i',i)
    tms=s[i]
    #tmt=t[i]
    tmlts=lts[i]
    if tmlts <= eye:
        print(tmlts)
        eye*=0
        eye+=tmlts
    else:
        print(eye)
    eye+=tms

###################################################################################################################################################3





#Sの並ぶ円を二週することで高橋の渡す最後のダイヤが最速の可能性も考慮できる

n=int(input())
s=list(map(int,input().split()))
t=list(map(int,input().split()))

#一回目の結果のリスト
lts=[]
#自分の居るところの値
eye=0
#一回目のダイヤの受け渡し処理
eye+=t[0]
lts.append(t[0])
eye+=s[0]
#比較作業一回目
for i in range(n-1):
    tms=s[i+1]
    tmt=t[i+1]
    if tmt <= eye:
        lts.append(tmt)
        eye*=0
        eye+=tmt
    else:
        lts.append(eye)
    eye+=tms
#一回目の結果と比較、eyeは継続
for i in range(n):
    tms=s[i]
    tmlts=lts[i]
    if tmlts <= eye:
        print(tmlts)
        eye*=0
        eye+=tmlts
    else:
        print(eye)
    eye+=tms


###############################################################################################################################

理解しました。`sys.stdin.read` を使用せずに、標準入力から直接データを読み取り、処理する方法を示します。以下のコードでは、標準入力から行ごとにデータを読み取り、その後で処理を行います。

```python
def main():
    import sys
    input = sys.stdin.read
    
    # 標準入力からデータを読み取る
    data = input().splitlines()
    
    # 最初の行から N と M を取得
    first_line = data[0].split()
    N = int(first_line[0])
    M = int(first_line[1])
    
    # グリッドの情報を取得
    grid = data[1:N+1]
    
    # 上下左右の四方向
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    
    ice_count = 0
    start_i, start_j = 2, 2  # 最初の位置 (2, 2)
    
    for di, dj in directions:
        # (2, 2) から始めて (di, dj) の方向に移動する
        ci, cj = start_i, start_j
        
        while True:
            ci += di
            cj += dj
            
            if ci < 0 or ci >= N or cj < 0 or cj >= M or grid[ci][cj] == '#':
                break  # グリッドの外に出たり岩にぶつかったら終了
            
            if grid[ci][cj] == '.':
                ice_count += 1
    
    print(ice_count)

if __name__ == "__main__":
    main()
```

### コードの説明:
- **標準入力の読み取り**: `sys.stdin.read` の代わりに `input()` を使用して、標準入力からデータを読み取ります。`input().splitlines()` を使って各行をリストとして取得します。
- **データの解析**: 最初の行から N と M を取得し、その後の行からグリッドの情報を取得します。
- **移動のシミュレーション**: 同様に、各方向に対してプレイヤーを (2, 2) から始めて、指定された方向に移動します。岩にぶつかるかグリッドの外に出るまで移動を続け、途中で出会った「氷」のセルの数を ice_count に加算します。
- **出力**: 最終的な ice_count を計算し、結果を標準出力に出力します。

この方法で、問題を解決する際に `sys.stdin.read` を使用しないで、より一般的な方法で標準入力を処理することができます。

#############################################################################################################################################################################################################################
この条件文は、プレイヤーが移動中にグリッドの境界外に出たり、岩にぶつかったりした場合に移動を終了するためのものです。ここで、条件を詳しく説明します。

```python
if ci < 0 or ci >= N or cj < 0 or cj >= M or grid[ci][cj] == '#':
    break  # グリッドの外に出たり岩にぶつかったら終了
```

この条件文は以下のように解釈できます：

- `ci < 0`: 行番号 \( ci \) が負の値になった場合、つまりグリッドの上端を超えた場合、移動を終了します。
- `ci >= N`: 行番号 \( ci \) が \( N \) 以上になった場合、つまりグリッドの下端を超えた場合、移動を終了します。
- `cj < 0`: 列番号 \( cj \) が負の値になった場合、つまりグリッドの左端を超えた場合、移動を終了します。
- `cj >= M`: 列番号 \( cj \) が \( M \) 以上になった場合、つまりグリッドの右端を超えた場合、移動を終了します。
- `grid[ci][cj] == '#'`: 現在位置 \( (ci, cj) \) のセルが岩である場合、移動を終了します。

これらの条件は、プレイヤーがグリッドの境界内で移動し、岩にぶつかった場合に移動を停止するために必要です。これにより、不正なインデックスでのアクセスや岩にぶつかった時の挙動を制御できます。

この条件文を用いて、プレイヤーの移動をシミュレートし、問題文で求められている「氷」のセルの数を正確にカウントすることができます。
################################################################################################################################################################################################################
上下左右の四方向 `(0, 1), (1, 0), (0, -1), (-1, 0)` は、一般的な2次元グリッドにおける移動方向を表現しています。これらの組み合わせが、それぞれ次の方向を示しています：

- `(0, 1)`: 右方向への移動を表します。ここで、`0` は行方向の変化がないことを示し、`1` は列方向が正の方向（右）に変化することを示します。
- `(1, 0)`: 下方向への移動を表します。`1` は行方向が正の方向（下）に変化することを示し、`0` は列方向の変化がないことを示します。
- `(0, -1)`: 左方向への移動を表します。ここで、`0` は行方向の変化がないことを示し、`-1` は列方向が負の方向（左）に変化することを示します。
- `(-1, 0)`: 上方向への移動を表します。`-1` は行方向が負の方向（上）に変化することを示し、`0` は列方向の変化がないことを示します。

これらの方向は、2次元グリッド上でプレイヤーやオブジェクトを移動させるためによく用いられます。例えば、迷路の探索やゲームの移動シミュレーションなど、多くの場面で上下左右の移動が必要とされるため、このような形で表現されています。

このリストを使うことで、プレイヤーが上下左右に移動する際に簡潔かつ直感的にコードを記述することができ、誤りが少なくなります。
######################################################################################################################################################
この行 `grid = data[1:N+1]` は、リスト `data` から特定の範囲の要素を取り出して新しいリスト `grid` を作成する操作です。これを具体的に説明します。

前提として、`data` は `input().splitlines()` によって得られた文字列のリストです。このリストには、標準入力から読み込んだ各行の文字列が要素として格納されています。

具体例として、次のような入力を考えてみます：

```
6 6
######
#....#
#.#..#
#..#.#
#....#
######
```

この場合、`data` は以下のようになります（`splitlines()` によって行ごとに分割されています）：

```python
data = [
    '6 6',
    '######',
    '#....#',
    '#.#..#',
    '#..#.#',
    '#....#',
    '######'
]
```

ここで、`data[1:N+1]` の意味は次の通りです：

- `data[1]` はリスト `data` の2番目の要素を取得します。つまり `'######'` が取得されます。
- `N` はグリッドの行数を表しており、この場合は `6` です。
- `N+1` は `N` に1を加えたものなので、`7` です。

したがって、`data[1:N+1]` は、リスト `data` のインデックス `1` から `6`（`N`+1まで）までの要素を取り出して新しいリスト `grid` を作成します。具体的には、`grid` は次のようになります：

```python
grid = [
    '######',
    '#....#',
    '#.#..#',
    '#..#.#',
    '#....#',
    '######'
]
```

この操作により、プログラムでは入力されたグリッドの情報を効率的に取り出し、その後の処理（移動のシミュレーションなど）に利用することができます。
####################################################################################################################################################################################################


import sys
input = sys.stdin.read
#########################################

data = input().splitlines()    
n, m = map(int, data[0].split())
ita = data[1:n+1]
#######################################

sy = 2
sx = 2
y=1
x=1
direction = [(-1, 0,"U"), (0, 1, "R"), (1, 0, "D"), (0, -1, "L")]
# 上、右、下、左

seen = set()
ans = 0
#for _ in range((n-2)*(m-2)):
#
print(ita)
print(type(ita))
#print('tt',ita[1][1])
for _ in range(x*y*4):
    #↑これわからん
    print('f11')
    for dy, dx, di in direction:
        print('f2')
        #y = sy
        #x = sx
        while True:
            y+= dy
            x+= dx
            #print(y,x)
            if x < 1 or x > n or y < 1 or y > m:
                print('hani',x,y,ita[x][y],di)
                #上下か判定
                y-=dy
                x-=dx
                break
            elif ita[x][y] == '#':
                print("iwwa",x,y,ita[x][y],di)
                #岩か判定
                y-=dy
                x-=dx
                break
            elif ita[x][y] == '.':
                #氷か判定
                if (x, y) not in seen:
                    print("kori",x,y,ita[x][y],di)
                    #既視か判定
                    seen.add((x, y))
                    ans+= 1

    #sy=y

    #sx=x
#print(seen)
print(ans)
#print(ita)
#for q in ita:
#    print(q)



####################################################################################################################
n = int(input())
mdi={}

for _ in range(n):
    a,b=input().split()
    if a not in mdi:
        mdi[a]=int(b)
    else:
        mdi[a]=0
for q in mdi.keys():
    print(q)

print("##############A")
print(set(mdi.keys()))
print(mdi)


#####################################

n = int(input())
lt=[]
for _ in range(n):
    a,b=input().split()
    if a not in lt:
        lt.append((a,b))
    else:
        
        lt[a]=0
        print(a)
print(lt)
###########################################################################################################################
#import sys
#input = sys.stdin.read

#data = list(map(str,input().splitlines()))
#n, m = map(int, data[0].split())
#ita = list(data[1:n+1])
#ita = list(data[1:])

#######################################
ita=[]
n,m=map(int,input().split())
#for _ in range(n):
#    ita.append(list(map(str,input().split())))
#print(data)
for _ in range(n):
    ita.append(list(input()))
ita[1][1]='x'
print(ita)

x=1
y=1
direction = [(-1, 0, 0), (0, 1, 1), (1, 0, 2), (0, -1, 3)]
#上、右、下、左
wilt=[]
ct=0
place=0
for dy,dx,di in direction:
    #print(dx,dy,di)
    #if ita[dx][dy] == 
    y+=dy
    x+=dx
    if x < 1 or x > n or y < 1 or y > m:
        print('hani',x,y,ita[x][y],di)
        #上下か判定
        y-=dy
        x-=dx
        #break
    if ita[y][x] == '#':
        print("iwwa",y,x,ita[y][x],di)
        #岩か判定
        y-=dy
        x-=dx
        #break
    elif ita[y][x] == '.':
        ita[y][x]='x'
        wilt.append((y,x,di))
        place+=1
        y-=dy
        x-=dx
        #↑不都合出るかも要注意(x-dx,y-dy,di)

print(ita[1][1])
now=0
print('place',place)
print(wilt)
direction2=[((0,1),(0,-1)),((-1,0),(1,0)),((0,1),(0,-1)),((-1,0),(1,0))]
#for u,v in direction2:
#    print(v)
while place != 0:
    y,x,di  = wilt[ct]
    print('y,x,di',y,x,di)
    dy,dx,z = direction[di]
    print('dy,dx,z',dy,dx,z)
    while ita[y][x] != '#':
        print('Z',ita[y][x],y,x)
        ita[x][y]='s'
        y+=dy
        x+=dx
        #print(dy,dx)
    place-=1
    ct+=1
    y-=dy
    x-=dy
    ####################

    for dy,dx,di in direction:
        y+=dy
        x+=dx
        if x < 1 or x > n or y < 1 or y > m:
            print('hani',x,y,ita[x][y],di)
            #上下か判定
            y-=dy
            x-=dx
            #break
        elif ita[y][x] == '#':
            print("iwwa",y,x,ita[y][x],di)
            #岩か判定
            y-=dy
            x-=dx
            #break
        elif ita[y][x] == '.':
            ita[y][x]='x'
            wilt.append((y,x,di))
            place+=1
            y-=dy
            x-=dx


for u in ita:
    print(u)
for a,b,c in wilt:
    print(ita[a][b])

##############################################################################################

#import sys
#input = sys.stdin.read

#data = list(map(str,input().splitlines()))
#n, m = map(int, data[0].split())
#ita = list(data[1:n+1])
#ita = list(data[1:])

#######################################
ans=1
ita=[]
n,m=map(int,input().split())
#for _ in range(n):
#    ita.append(list(map(str,input().split())))
#print(data)
for _ in range(n):
    ita.append(list(input()))
ita[1][1]='x'
print(ita)

x=1
y=1
direction = [(-1, 0, 0), (0, 1, 1), (1, 0, 2), (0, -1, 3)]
#上、右、下、左
wilt=[]
ct=0
place=0
for dy,dx,di in direction:
    #print(dx,dy,di)
    #if ita[dx][dy] == 
    y+=dy
    x+=dx
    if x < 1 or x > n or y < 1 or y > m:
        print('hani',x,y,ita[x][y],di)
        #上下か判定
        y-=dy
        x-=dx
        #break
    if ita[y][x] == '#':
        print("iwwa",y,x,ita[y][x],di)
        #岩か判定
        y-=dy
        x-=dx
        #break
    elif ita[y][x] == '.':
        ita[y][x]='x'
        ans+=1
        wilt.append((y,x,di))
        place+=1
        y-=dy
        x-=dx
        #↑不都合出るかも要注意(x-dx,y-dy,di)

print(ita[1][1])
now=0
print('place',place)
print(wilt)
direction2=[((0,1),(0,-1)),((-1,0),(1,0)),((0,1),(0,-1)),((-1,0),(1,0))]
print(direction2[1],'d2')
print(direction2[1][1])
#for u,v in direction2:
#    print(v)
while place != 0:
    y,x,di  = wilt[ct]
    print('y,x,di',y,x,di)
    dy,dx,z = direction[di]
    print('dy,dx,z',dy,dx,z)
    while ita[y][x] != '#':
        print('Z',ita[y][x],y,x)
        ita[x][y]='s'
        y+=dy
        x+=dx
        #print(dy,dx)
    place-=1
    ct+=1
    y-=dy
    x-=dy
    ####################

    for a,b in direction2[di]:
        print(a,b)
        y+=a
        x+=b
        if ita[y][x] == '#':
            print("iwwa",y,x,ita[y][x],di)
            #岩か判定
            y-=a
            x-=b
            wilt.append((y,x,di))
            place+=1
            #break
        elif ita[y][x] == '.':
            print('.=x')
            ita[y][x]='x'
            ans+=1
            y-=a
            x-=b
    else:
        place-=1
    print('wilt',wilt)


for u in ita:
    print(u)
print(ans)
#for a,b,c in wilt:
#    print(ita[a][b])
#eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee





ans=1
ita=[]
n,m=map(int,input().split())

for _ in range(n):
    ita.append(list(input()))

ita[1][1]='x'

x=1
y=1
direction = [(-1, 0, 0), (0, 1, 1), (1, 0, 2), (0, -1, 3)]
#上、右、下、左
wilt=[]

place=0
print('ZERO')
for dy,dx,di in direction:
    y+=dy
    x+=dx

    if ita[y][x] == '.':
        #print('.=x')
        ita[y][x]='x'
        ans+=1
        wilt.append((y,x,di))
        place+=1
    y-=dy
    x-=dx
#11111111111111111111111111111111111111111111111111111111111111111111111
for u in ita:
    print(u)
#11111111111111111111111111111111111111111111111111111111111111111111111

print('place',place)
print(wilt)
direction2=[[(0,1,1),(0,-1,3)],[(-1,0,0),(1,0,2)],[(0,1,1),(0,-1,3)],[(-1,0,0),(1,0,2)]]

ct=0
while place != 0:
    y,x,di  = wilt[ct]
    #print('y,x,di',y,x,di)
    dy,dx,z = direction[di]
    print('dy,dx,z',dy,dx,z)
    y+=dy
    x+=dx
    #print(ita[y][x],'D',y,x)
    print('ONE')
    while ita[y][x] != '#':
        print(y,x,'y,x','zero',ans)
        if ita[y][x] =='.':
            #print('Z',ita[y][x],y,x)
            ita[y][x]='s'
            ans+=1
        y+=dy
        x+=dx
            #print(dy,dx)
    else:
        place-=1
    y-=dy
    x-=dx
    ########################################
    print(y,x,'y,x','one',ita[y][x])
    for u in ita:
        print(u)
    ########################################
    print('TWO')
    for a,b,c in direction2[di]:
        print(a,b,'a,b')
        print(y,x,'y,x')
        y+=a
        x+=b
        if ita[y][x] != '#':
            if ita[y][x]=='.':
                print('.=x')
                wilt.append((y,x,c))
                place+=1
                ita[y][x]='x'
                ans+=1
        else:
            print('else')
            y-=a
            x-=b
    for u in ita:
        print(u)

    
        
    ct+=1
    #place-=1
    print('place',place)
    print('wilt',wilt)
    print('ct',ct)


for u in ita:
    print(u)
print(ans)
#for a,b,c in wilt:
#    print(ita[a][b])
#33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333


ans=1
ita=[]
n,m=map(int,input().split())

for _ in range(n):
    ita.append(list(input()))

ita[1][1]='x'

x=1
y=1
direction = [(-1, 0, 0), (0, 1, 1), (1, 0, 2), (0, -1, 3)]
#上、右、下、左
wilt=[]

place=0
print('ZERO')
for dy,dx,di in direction:
    y+=dy
    x+=dx

    if ita[y][x] == '.':
        #print('.=x')
        ita[y][x]='x'
        ans+=1
        wilt.append((y,x,di))
        place+=1
    y-=dy
    x-=dx
#11111111111111111111111111111111111111111111111111111111111111111111111
for u in ita:
    print(''.join(u))
#11111111111111111111111111111111111111111111111111111111111111111111111

print('place',place)
#print(wilt)
direction2=[[(0,1,1),(0,-1,3)],[(-1,0,0),(1,0,2)],[(0,1,1),(0,-1,3)],[(-1,0,0),(1,0,2)]]

ct=0
while place != 0:
    print('ONE')
    y,x,di  = wilt[ct]
    #print('y,x,di',y,x,di)
    dy,dx,z = direction[di]
    print('dy,dx,z',dy,dx,z)
    y+=dy
    x+=dx
    #print(ita[y][x],'D',y,x)
    while ita[y][x] != '#':
        if ita[y][x] =='.':
            #print('Z',ita[y][x],y,x)
            ita[y][x]='O'
            ans+=1
            print(y,x,'y,x','ans',ans)
        y+=dy
        x+=dx
            #print(dy,dx)
    else:
        place-=1
    y-=dy
    x-=dx
    ########################################
    print(y,x,'y,x','one',ita[y][x])
    for u in ita:
        print(''.join(u))
    ########################################
    print('TWO')
    for a,b,c in direction2[di]:
        print(a,b,'a,b',c)
        print(y,x,'y,x')
        y+=a
        x+=b
        if ita[y][x] != '#':
            if ita[y][x]=='.'or'O':
                print('.=x')
                wilt.append((y,x,c))
                place+=1
                ita[y][x]='S'
                ans+=1
        else:
            print('else')
        y-=a
        x-=b
    for u in ita:
        print(''.join(u))

    
        

    ct+=1
    #place-=1
    print('place',place)
    #print('wilt',wilt)
    print('ct',ct)


for u in ita:
    print(''.join(u))
print(ans)
#for a,b,c in wilt:
#    print(ita[a][b])


#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa




n=int(input())
a=list((map(int,input().split())))
lt=[[u+1,0] for u in range(n)]
ct=0
for i in a:
    ct+=1
    lt[i-1][1]=


print(n,a)
print(lt)



